<link href="/stylesheets/card.css" rel="stylesheet" />
<script
  type="text/javascript"
  src="https://web.squarecdn.com/v1/square.js"
></script>

<script>
  const appId = "<%-process.env.SquareAppID%>";
  const locationId = "<%-process.env.LocationID%>";
  const url = "<%-process.env.CLIENT_URL%>";
  const Data = async () => {
    const res = await axios.get(`${url}/checkoutdata`);
    const data = res.data;
    return data;
  };

  async function initializeCard(payments) {
    const card = await payments.card();
    await card.attach("#card-container");
    return card;
  }
  async function initializeGiftCard(payments) {
    const giftCard = await payments.giftCard();
    await giftCard.attach("#gift-card-container");

    return giftCard;
  }
  async function initializeACH(payments) {
    const ach = await payments.ach();
    return ach;
  }

  async function createPayment(
    token,
    verificationToken,
    orderID,
    partialAuthorization,
    cardType,
    price,
    autoComplete
  ) {
    const bodyParameters = {
      locationId,
      orderID,
      sourceId: token,
      partialAuthorization,
      price: price,
      cardType,
      autoComplete,
    };

    if (verificationToken !== undefined) {
      bodyParameters.verificationToken = verificationToken;
    }

    const body = JSON.stringify(bodyParameters);

    const paymentResponse = await fetch("/payment", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body,
    });
    console.log("mypayment", paymentResponse);
    if (paymentResponse.ok) {
      return paymentResponse.json();
    }
    const errorBody = await paymentResponse.text();
    throw new Error(errorBody);
  }

  async function tokenize(paymentMethod, options = {}) {
    const tokenResult = await paymentMethod.tokenize(options);
    if (tokenResult.status === "OK") {
      return tokenResult.token;
    } else {
      let errorMessage = `Tokenization failed with status: ${tokenResult.status}`;
      if (tokenResult.errors) {
        errorMessage += ` and errors: ${JSON.stringify(tokenResult.errors)}`;
      }

      throw new Error(errorMessage);
    }
  }

  // status is either SUCCESS or FAILURE;
  function displayPaymentResults(status) {
    const statusContainer = document.getElementById("payment-status-container");
    if (status === "SUCCESS") {
      statusContainer.classList.remove("is-failure");
      statusContainer.classList.add("is-success");
    } else {
      statusContainer.classList.remove("is-success");
      statusContainer.classList.add("is-failure");
    }

    statusContainer.style.visibility = "visible";
  }

  async function verifyBuyer(payments, token, total, email) {
    const verificationDetails = {
      amount: `${total}`,
      billingContact: {
        addressLines: [
          document.getElementById("address").value,
          document.getElementById("address2").value,
        ],
        lastName: document.getElementById("lastName").value,
        firstName: document.getElementById("firstName").value,
        email: email,
        country: document.getElementById("country").value,
        phone: document.getElementById("phone").value,
        state: document.getElementById("state").value,
        city: document.getElementById("city").value,
        zip: document.getElementById("zip").value,
      },
      currencyCode: "USD",
      intent: "CHARGE",
    };
    const verificationResults = await payments.verifyBuyer(
      token,
      verificationDetails
    );
    return verificationResults.token;
  }

  function getBillingContact(form) {
    const formData = new FormData(form);
    return {
      givenName: formData.get("givenName"),
      familyName: formData.get("familyName"),
    };
  }
  function getACHOptions(form) {
    const billingContact = getBillingContact(form);
    const accountHolderName = `${billingContact.givenName} ${billingContact.familyName}`;
    return { accountHolderName };
  }

  document.addEventListener("DOMContentLoaded", async function () {
    if (!window.Square) {
      throw new Error("Square.js failed to load properly");
    }
    let orderResponseID;
    let payments;

    try {
      payments = window.Square.payments(appId, locationId);
      const cart = await Data();
      const items = cart[0].items;
      console.log("iensf", items);
      const bodyParameters = {
        locationId,
        items,
      };
      orderResponseID = await axios.post(
        `${url}/square/createOrder`,
        bodyParameters
      );
      orderResponseID = orderResponseID.data.id.toString();
    } catch {
      const statusContainer = document.getElementById(
        "payment-status-container"
      );
      statusContainer.className = "missing-credentials";
      statusContainer.style.visibility = "visible";
      return;
    }

    let card;
    try {
      card = await initializeCard(payments);
      const form = document.querySelector(".paymentFormDisplay");
      form.style.display = "inline";
    } catch (e) {
      console.error("Initializing Card failed", e);
      return;
    }

    const giftcontainer = document.querySelector(".add-giftcard");
    const giftbutton = document.querySelector("#gift-button");
    const addedGiftcard = document.querySelector(".addedGiftCards");
    const paymentContainer = document.querySelector("#paymentContainer");
    let fname = document.getElementById("firstName");
    let lname = document.getElementById("lastName");
    const address = document.getElementById("address");
    const address2 = document.getElementById("address2");
    const city = document.getElementById("city");
    const state = document.getElementById("state");
    const zip = document.getElementById("zip");
    const country = document.getElementById("country");
    const phone = document.getElementById("phone");
    const cardButton = document.getElementById("card-button");
    const achpay_button = document.getElementById("achpay-button");
    const achContainer = document.getElementById("addAch");
    const cardpayCon = document.querySelector(".cardpay");
    let giftCardButton;
    let achButton;
    let isgiftcard = false;
    let isAch = false;
    let giftCard;
    let paymentIDs = [];

    async function handlePaymentMethodSubmission(
      event,
      paymentMethod,
      autoComplete = false,
      shouldVerify = false,
      partialAuthorization = false,
      cardType = "none",
      option = {}
    ) {
      event.preventDefault();

      try {
        // // disable the submit button as we await tokenization and make a payment request.
        giftbutton.disabled = true;
        cardButton.disabled = true;
        achpay_button.disabled = true;
        const cart = await Data();
        const priceTotal = cart[0].taxedTotal;
        const email = cart[1].email;
        if (giftCardButton) {
          giftCardButton.disabled = true;
        }
        if (achButton) {
          achButton.disabled = true;
        }
        const token = await tokenize(paymentMethod, option);
        let verificationToken;
        if (shouldVerify) {
          verificationToken = await verifyBuyer(
            payments,
            token,
            priceTotal,
            email
          );
        }
        const paymentResults = await createPayment(
          token,
          verificationToken,
          orderResponseID,
          partialAuthorization,
          cardType,
          priceTotal,
          autoComplete
        );
        if (cardType === "ach") {
          console.log(paymentResults);
          displayPaymentResults("SUCCESS");
          setTimeout(callBack_func, 5000);
          function callBack_func() {
            document.location.href = `${url}`;
          }
        }
        const myPayment = paymentResults.payment;
        paymentIDs.push(myPayment.id);
        if (cardType === "card" && paymentResults.success) {
          createForm(priceTotal / 100);
        }

        if (cardType === "giftCard" && paymentResults.success) {
          const giftamount = paymentResults.payment.amountMoney / 100;
          const taxedTotal = parseInt(priceTotal) / 100 - giftamount;
          // console.log("giftcart", priceTotal);
          cardButton.disabled = false;
          giftCardButton.disabled = false;
          giftbutton.disabled = false;
          const giftCard = document.createElement("span");
          giftCard.innerHTML = `Giftcard Amount Added: $${giftamount}`;
          addedGiftcard.appendChild(giftCard);
          // taxedTotal -= giftamount;
          // Subtotal -= giftamount;
          // summaryTotal.innerHTML = `$${taxedTotal}`;
          // summarySub.innerHTML = `$${Subtotal}`;
          if (taxedTotal == 0) {
            createForm(priceTotal / 100);
          }
        }
        console.debug("Payment Success", paymentResults);
      } catch (e) {
        cardButton.disabled = false;
        if (giftCardButton) {
          giftCardButton.disabled = false;
        }
        if (achButton) {
          achButton.disabled = false;
        }
        achpay_button.disabled = false;
        giftbutton.disabled = false;
        displayPaymentResults("FAILURE");
        console.error(e.message);
      }
    }

    function createForm(price) {
      paymentContainer.innerHTML = "";
      const div = document.createElement("div");
      div.innerHTML = `Do you want to complete the payment of $${price}`;
      const payForm = document.createElement("form");
      payForm.setAttribute("method", "post");
      payForm.setAttribute("action", "/square/success");
      const ids = document.createElement("input");
      ids.setAttribute("type", "hidden");
      ids.setAttribute("name", `orderID`);
      ids.setAttribute("value", `${orderResponseID}`);
      paymentIDs.forEach((id, i) => {
        const pay = document.createElement("input");
        pay.setAttribute("type", "hidden");
        pay.setAttribute("name", `paymentIds[]`);
        pay.setAttribute("value", `${id}`);
        payForm.appendChild(pay);
      });
      // create a submit button
      var s = document.createElement("input");
      s.setAttribute("type", "submit");
      s.setAttribute("class", "btn");
      s.setAttribute("value", "Continue To confirm Payment");
      payForm.appendChild(ids);
      payForm.appendChild(s);
      paymentContainer.appendChild(div);
      paymentContainer.appendChild(payForm);
    }

    giftbutton.addEventListener("click", async () => {
      isAch = !isAch;
      if (isAch) {
        const inner = `<form id="payment-form">
          <div id="gift-card-container"></div>
           <button id="gift-card-button" type="button">Pay with Gift Card</button>
          </form>
          <div id="payment-status-container"></div>`;

        giftcontainer.innerHTML = inner;
        try {
          giftCard = await initializeGiftCard(payments);
        } catch (e) {
          console.error("Initializing Gift Card failed", e);
        }
        giftCardButton = document.getElementById("gift-card-button");
        giftCardButton.addEventListener("click", async function (event) {
          await handlePaymentMethodSubmission(
            event,
            giftCard,
            false,
            false,
            true,
            "giftCard"
          );
        });
      } else {
        giftcontainer.innerHTML = " ";
      }
    });

    achpay_button.addEventListener("click", async () => {
      isAch = !isAch;
      if (isAch) {
        const inner = `  <form id="payment-for" class="mt-3 validatedform" novalidate >
          <fieldset class="buyer-inputs field">
            <input
              type="text"
              aria-required="true"
              aria-label="First Name"
              placeholder="Given Name"
              name="givenName"
              class="form-control"
              spellcheck="false"
              required
              id = 'firstName'
            />

            <input
              type="text"
              aria-required="true"
              aria-label="Last Name"
              placeholder="Family Name"
              name="familyName"
              id = "lastName"
              class="form-control"
              spellcheck="false"
              required
            />
          </fieldset>
          <button id="ach-button" type="button">Pay with Bank Account</button>
        </form>
          <div id="payment-status-container"></div>`;
        achContainer.innerHTML = inner;
        cardpayCon.style.display = "none";
        giftcontainer.innerHTML = " ";
        giftbutton.disabled = true;
        let ach;
        try {
          ach = await initializeACH(payments);
        } catch (e) {
          console.error("Initializing ACH failed", e);
          return;
        }
        achButton = document.getElementById("ach-button");

        achButton.addEventListener("click", async function (event) {
          try {
            const paymentForm = document.getElementById("payment-for");
            event.preventDefault();
            event.stopPropagation();
            const valid = checkAchInputs();
            paymentForm.classList.add("was-validated");
            if (valid) {
              const achOptions = getACHOptions(paymentForm);
              await handlePaymentMethodSubmission(
                event,
                ach,
                true,
                false,
                false,
                "ach",
                achOptions
              );
            }
          } catch (er) {
            console.log("errr", er);
          }
        });
      } else {
        giftbutton.disabled = false;
        achContainer.innerHTML = " ";
        cardpayCon.style.display = "inline";
      }
    });

    const form = document.querySelector(".validatedform");
    cardButton.addEventListener("click", async function (event) {
      // SCA only needs to be run for Card Payments. All other payment methods can be set to false.

      event.preventDefault();
      event.stopPropagation();
      const valid = checkInputs();
      form.classList.add("was-validated");
      if (valid) {
        handlePaymentMethodSubmission(event, card, false, true, false, "card");
      }
    });
    const billingCheck = document.querySelector("#billingCheck");
    isBillingChecked = false;
    billingCheck.addEventListener("click", async () => {
      isBillingChecked = !isBillingChecked;
      console.log(isBillingChecked);
      SetShipping(isBillingChecked);
    });
    async function SetShipping(checked) {
      if (checked) {
        const cart = await Data();
        const shipping = cart[1].Shipping;
        fname.value = shipping.firstname;
        fname.type = "hidden";
        lname.value = shipping.lastname;
        lname.type = "hidden";
        address.value = shipping.address;
        address.type = "hidden";
        address2.value = shipping.address2;
        address2.type = "hidden";
        city.value = shipping.city;
        city.type = "hidden";
        state.value = shipping.state;
        state.style.display = "none";
        zip.value = shipping.zip;
        zip.type = "hidden";
        country.value = shipping.country;
        country.style.display = "none";
        phone.value = shipping.phone;
        phone.type = "hidden";
      } else {
        fname.value = "";
        fname.type = "text";
        lname.value = "";
        lname.type = "text";
        address.value = "";
        address.type = "text";
        address2.value = "";
        address2.type = "text";
        city.value = "";
        city.type = "text";
        state.value = "";
        state.style.display = "inline";
        zip.value = "";
        zip.type = "number";
        country.value = "";
        country.style.display = "inline";
        phone.value = "";
        phone.type = "tel";
      }
    }

    function checkAchInputs() {
      const fname = document.getElementById("firstName");
      const lname = document.getElementById("lastName");
      let fnameValid;
      let lnameValid;
      if (fname) {
        const fName = fname.value.trim();
        if (fName === "") {
          fnameValid = false;
        } else {
          setSuccessFor(fName, fname);
          fnameValid = true;
        }
      } else {
        fnameValid = true;
      }
      if (lname) {
        const lName = lname.value.trim();
        if (lName === "") {
          lnameValid = false;
        } else {
          setSuccessFor(lname, lName);
          lnameValid = true;
        }
      } else {
        lnameValid = true;
      }
      let formValid = lnameValid && fnameValid;
      return formValid;
    }
    function checkInputs() {
      let fnameValid;
      let lnameValid;
      let addressValid;
      let address2Valid;
      let countryValid;
      let zipValid;
      let cityValid;
      let stateValid;
      let phoneValid;
      if (fname) {
        const fName = fname.value.trim();
        if (fName === "") {
          fnameValid = false;
        } else {
          setSuccessFor(fName, fname);
          fnameValid = true;
        }
      } else {
        fnameValid = true;
      }
      if (lname) {
        const lName = lname.value.trim();
        if (lName === "") {
          lnameValid = false;
        } else {
          setSuccessFor(lname, lName);
          lnameValid = true;
        }
      } else {
        lnameValid = true;
      }
      if (address) {
        const addressValue = address.value.trim();
        if (addressValue === "") {
          addressValid = false;
        } else {
          setSuccessFor(address, addressValue);
          addressValid = true;
        }
      } else {
        addressValid = true;
      }
      if (address2) {
        const address2Value = address2.value.trim();
        if (address2Value === "") {
          address2Valid = false;
        } else {
          setSuccessFor(address2, address2Value);
          address2Valid = true;
        }
      } else {
        address2Valid = true;
      }
      if (country) {
        const countryValue = country.value.trim();
        if (countryValue === "") {
          countryValid = false;
        } else {
          setSuccessFor(country, countryValue);
          countryValid = true;
        }
      } else {
        countryValid = true;
      }
      if (city) {
        const cityValue = city.value.trim();
        if (cityValue === "") {
          cityValid = false;
        } else {
          setSuccessFor(city, cityValue);
          cityValid = true;
        }
      } else {
        cityValid = true;
      }
      if (state) {
        const stateValue = state.value.trim();
        if (stateValue === "") {
          stateValid = false;
        } else {
          setSuccessFor(state, stateValue);
          stateValid = true;
        }
      } else {
        stateValid = true;
      }
      if (zip) {
        const zipValue = zip.value.trim();
        if (zipValue === "") {
          zipValid = false;
        } else if (zipValue.length < 5 || zipValue.length > 5) {
          zipValid = false;
        } else {
          setSuccessFor(zip, zipValue);
          zipValid = true;
        }
      } else {
        zipValid = true;
      }
      if (phone) {
        const phoneValue = phone.value.trim();
        if (phoneValue === "") {
          phoneValid = false;
        } else {
          setSuccessFor(phone, phoneValue);
          phoneValid = true;
        }
      } else {
        phoneValid = true;
      }
      let formValid =
        lnameValid &&
        fnameValid &&
        addressValid &&
        address2Valid &&
        countryValid &&
        zipValid &&
        cityValid &&
        stateValid &&
        phoneValid;

      return formValid;
    }
    function setSuccessFor(input, value) {
      input.value = value;
    }
  });
</script>

<div class="formbg-outer">
  <div class="formbg formbg-inner">
    <div class="formbg-inner" id="paymentContainer">
      <button id="gift-button" type="button" class="mt-2">
        Gift Card Payment
      </button>
      <button id="achpay-button" type="button" class="mt-2">
        Bank to Bank Payment
      </button>
      <h3 class="mt-5">Payment</h3>
      <div class="add-giftcard"></div>
      <div class="addedGiftCards"></div>
      <div id="addAch"></div>

      <div class="cardpay">
        <form id="payment-form" novalidate class="validatedform">
          <div id="card-container"></div>
          <div style="display: none" class="paymentFormDisplay">
            <div class="field padding-bottom--10 name formControl">
              <input
                type="text"
                name="billing[firstname]"
                class="form-control"
                id="firstName"
                placeholder="First Name"
                required
              />
              <input
                type="text"
                name="billing[lastname]"
                class="form-control"
                id="lastName"
                placeholder="Last Name"
                required
              />
            </div>
            <div class="field padding-bottom--10 formControl">
              <input
                type="text"
                name="billing[address]"
                class="form-control"
                id="address"
                placeholder="Address Line 1"
                required
              />
            </div>
            <div class="field padding-bottom--10 formControl">
              <input
                type="text"
                name="billing[address2]"
                class="form-control"
                id="address2"
                placeholder="Address Line 2"
                required
              />
            </div>
            <div class="field formControl">
              <select
                name="billing[country]"
                class="form-control"
                id="country"
                required
              >
                <option
                  label="Select a country ... "
                  selected="selected"
                ></option>
                <option value="AF">Afghanistan</option>
                <option value="AX">Aland Islands</option>
                <option value="AL">Albania</option>
                <option value="DZ">Algeria</option>
                <option value="AS">American Samoa</option>
                <option value="AD">Andorra</option>
                <option value="AO">Angola</option>
                <option value="AI">Anguilla</option>
                <option value="AQ">Antarctica</option>
                <option value="AG">Antigua and Barbuda</option>
                <option value="AR">Argentina</option>
                <option value="AM">Armenia</option>
                <option value="AW">Aruba</option>
                <option value="AU">Australia</option>
                <option value="AT">Austria</option>
                <option value="AZ">Azerbaijan</option>
                <option value="BS">Bahamas</option>
                <option value="BH">Bahrain</option>
                <option value="BD">Bangladesh</option>
                <option value="BB">Barbados</option>
                <option value="BY">Belarus</option>
                <option value="BE">Belgium</option>
                <option value="BZ">Belize</option>
                <option value="BJ">Benin</option>
                <option value="BM">Bermuda</option>
                <option value="BT">Bhutan</option>
                <option value="BO">Bolivia</option>
                <option value="BQ">Bonaire, Sint Eustatius and Saba</option>
                <option value="BA">Bosnia and Herzegovina</option>
                <option value="BW">Botswana</option>
                <option value="BV">Bouvet Island</option>
                <option value="BR">Brazil</option>
                <option value="IO">British Indian Ocean Territory</option>
                <option value="BN">Brunei Darussalam</option>
                <option value="BG">Bulgaria</option>
                <option value="BF">Burkina Faso</option>
                <option value="BI">Burundi</option>
                <option value="KH">Cambodia</option>
                <option value="CM">Cameroon</option>
                <option value="CA">Canada</option>
                <option value="CV">Cape Verde</option>
                <option value="KY">Cayman Islands</option>
                <option value="CF">Central African Republic</option>
                <option value="TD">Chad</option>
                <option value="CL">Chile</option>
                <option value="CN">China</option>
                <option value="CX">Christmas Island</option>
                <option value="CC">Cocos (Keeling) Islands</option>
                <option value="CO">Colombia</option>
                <option value="KM">Comoros</option>
                <option value="CG">Congo</option>
                <option value="CD">
                  Congo, Democratic Republic of the Congo
                </option>
                <option value="CK">Cook Islands</option>
                <option value="CR">Costa Rica</option>
                <option value="CI">Cote D'Ivoire</option>
                <option value="HR">Croatia</option>
                <option value="CU">Cuba</option>
                <option value="CW">Curacao</option>
                <option value="CY">Cyprus</option>
                <option value="CZ">Czech Republic</option>
                <option value="DK">Denmark</option>
                <option value="DJ">Djibouti</option>
                <option value="DM">Dominica</option>
                <option value="DO">Dominican Republic</option>
                <option value="EC">Ecuador</option>
                <option value="EG">Egypt</option>
                <option value="SV">El Salvador</option>
                <option value="GQ">Equatorial Guinea</option>
                <option value="ER">Eritrea</option>
                <option value="EE">Estonia</option>
                <option value="ET">Ethiopia</option>
                <option value="FK">Falkland Islands (Malvinas)</option>
                <option value="FO">Faroe Islands</option>
                <option value="FJ">Fiji</option>
                <option value="FI">Finland</option>
                <option value="FR">France</option>
                <option value="GF">French Guiana</option>
                <option value="PF">French Polynesia</option>
                <option value="TF">French Southern Territories</option>
                <option value="GA">Gabon</option>
                <option value="GM">Gambia</option>
                <option value="GE">Georgia</option>
                <option value="DE">Germany</option>
                <option value="GH">Ghana</option>
                <option value="GI">Gibraltar</option>
                <option value="GR">Greece</option>
                <option value="GL">Greenland</option>
                <option value="GD">Grenada</option>
                <option value="GP">Guadeloupe</option>
                <option value="GU">Guam</option>
                <option value="GT">Guatemala</option>
                <option value="GG">Guernsey</option>
                <option value="GN">Guinea</option>
                <option value="GW">Guinea-Bissau</option>
                <option value="GY">Guyana</option>
                <option value="HT">Haiti</option>
                <option value="HM">Heard Island and Mcdonald Islands</option>
                <option value="VA">Holy See (Vatican City State)</option>
                <option value="HN">Honduras</option>
                <option value="HK">Hong Kong</option>
                <option value="HU">Hungary</option>
                <option value="IS">Iceland</option>
                <option value="IN">India</option>
                <option value="ID">Indonesia</option>
                <option value="IR">Iran, Islamic Republic of</option>
                <option value="IQ">Iraq</option>
                <option value="IE">Ireland</option>
                <option value="IM">Isle of Man</option>
                <option value="IL">Israel</option>
                <option value="IT">Italy</option>
                <option value="JM">Jamaica</option>
                <option value="JP">Japan</option>
                <option value="JE">Jersey</option>
                <option value="JO">Jordan</option>
                <option value="KZ">Kazakhstan</option>
                <option value="KE">Kenya</option>
                <option value="KI">Kiribati</option>
                <option value="KP">
                  Korea, Democratic People's Republic of
                </option>
                <option value="KR">Korea, Republic of</option>
                <option value="XK">Kosovo</option>
                <option value="KW">Kuwait</option>
                <option value="KG">Kyrgyzstan</option>
                <option value="LA">Lao People's Democratic Republic</option>
                <option value="LV">Latvia</option>
                <option value="LB">Lebanon</option>
                <option value="LS">Lesotho</option>
                <option value="LR">Liberia</option>
                <option value="LY">Libyan Arab Jamahiriya</option>
                <option value="LI">Liechtenstein</option>
                <option value="LT">Lithuania</option>
                <option value="LU">Luxembourg</option>
                <option value="MO">Macao</option>
                <option value="MK">
                  Macedonia, the Former Yugoslav Republic of
                </option>
                <option value="MG">Madagascar</option>
                <option value="MW">Malawi</option>
                <option value="MY">Malaysia</option>
                <option value="MV">Maldives</option>
                <option value="ML">Mali</option>
                <option value="MT">Malta</option>
                <option value="MH">Marshall Islands</option>
                <option value="MQ">Martinique</option>
                <option value="MR">Mauritania</option>
                <option value="MU">Mauritius</option>
                <option value="YT">Mayotte</option>
                <option value="MX">Mexico</option>
                <option value="FM">Micronesia, Federated States of</option>
                <option value="MD">Moldova, Republic of</option>
                <option value="MC">Monaco</option>
                <option value="MN">Mongolia</option>
                <option value="ME">Montenegro</option>
                <option value="MS">Montserrat</option>
                <option value="MA">Morocco</option>
                <option value="MZ">Mozambique</option>
                <option value="MM">Myanmar</option>
                <option value="NA">Namibia</option>
                <option value="NR">Nauru</option>
                <option value="NP">Nepal</option>
                <option value="NL">Netherlands</option>
                <option value="AN">Netherlands Antilles</option>
                <option value="NC">New Caledonia</option>
                <option value="NZ">New Zealand</option>
                <option value="NI">Nicaragua</option>
                <option value="NE">Niger</option>
                <option value="NG">Nigeria</option>
                <option value="NU">Niue</option>
                <option value="NF">Norfolk Island</option>
                <option value="MP">Northern Mariana Islands</option>
                <option value="NO">Norway</option>
                <option value="OM">Oman</option>
                <option value="PK">Pakistan</option>
                <option value="PW">Palau</option>
                <option value="PS">Palestinian Territory, Occupied</option>
                <option value="PA">Panama</option>
                <option value="PG">Papua New Guinea</option>
                <option value="PY">Paraguay</option>
                <option value="PE">Peru</option>
                <option value="PH">Philippines</option>
                <option value="PN">Pitcairn</option>
                <option value="PL">Poland</option>
                <option value="PT">Portugal</option>
                <option value="PR">Puerto Rico</option>
                <option value="QA">Qatar</option>
                <option value="RE">Reunion</option>
                <option value="RO">Romania</option>
                <option value="RU">Russian Federation</option>
                <option value="RW">Rwanda</option>
                <option value="BL">Saint Barthelemy</option>
                <option value="SH">Saint Helena</option>
                <option value="KN">Saint Kitts and Nevis</option>
                <option value="LC">Saint Lucia</option>
                <option value="MF">Saint Martin</option>
                <option value="PM">Saint Pierre and Miquelon</option>
                <option value="VC">Saint Vincent and the Grenadines</option>
                <option value="WS">Samoa</option>
                <option value="SM">San Marino</option>
                <option value="ST">Sao Tome and Principe</option>
                <option value="SA">Saudi Arabia</option>
                <option value="SN">Senegal</option>
                <option value="RS">Serbia</option>
                <option value="CS">Serbia and Montenegro</option>
                <option value="SC">Seychelles</option>
                <option value="SL">Sierra Leone</option>
                <option value="SG">Singapore</option>
                <option value="SX">Sint Maarten</option>
                <option value="SK">Slovakia</option>
                <option value="SI">Slovenia</option>
                <option value="SB">Solomon Islands</option>
                <option value="SO">Somalia</option>
                <option value="ZA">South Africa</option>
                <option value="GS">
                  South Georgia and the South Sandwich Islands
                </option>
                <option value="SS">South Sudan</option>
                <option value="ES">Spain</option>
                <option value="LK">Sri Lanka</option>
                <option value="SD">Sudan</option>
                <option value="SR">Suriname</option>
                <option value="SJ">Svalbard and Jan Mayen</option>
                <option value="SZ">Swaziland</option>
                <option value="SE">Sweden</option>
                <option value="CH">Switzerland</option>
                <option value="SY">Syrian Arab Republic</option>
                <option value="TW">Taiwan, Province of China</option>
                <option value="TJ">Tajikistan</option>
                <option value="TZ">Tanzania, United Republic of</option>
                <option value="TH">Thailand</option>
                <option value="TL">Timor-Leste</option>
                <option value="TG">Togo</option>
                <option value="TK">Tokelau</option>
                <option value="TO">Tonga</option>
                <option value="TT">Trinidad and Tobago</option>
                <option value="TN">Tunisia</option>
                <option value="TR">Turkey</option>
                <option value="TM">Turkmenistan</option>
                <option value="TC">Turks and Caicos Islands</option>
                <option value="TV">Tuvalu</option>
                <option value="UG">Uganda</option>
                <option value="UA">Ukraine</option>
                <option value="AE">United Arab Emirates</option>
                <option value="GB">United Kingdom</option>
                <option value="US">United States</option>
                <option value="UM">United States Minor Outlying Islands</option>
                <option value="UY">Uruguay</option>
                <option value="UZ">Uzbekistan</option>
                <option value="VU">Vanuatu</option>
                <option value="VE">Venezuela</option>
                <option value="VN">Viet Nam</option>
                <option value="VG">Virgin Islands, British</option>
                <option value="VI">Virgin Islands, U.s.</option>
                <option value="WF">Wallis and Futuna</option>
                <option value="EH">Western Sahara</option>
                <option value="YE">Yemen</option>
                <option value="ZM">Zambia</option>
                <option value="ZW">Zimbabwe</option>
              </select>
            </div>
            <div class="field name formControl">
              <input
                type="number"
                name="billing[zip]"
                class="form-control"
                id="zip"
                placeholder="Zip Code"
                required
              />
              <input
                type="text"
                name="billing[city]"
                class="form-control"
                id="city"
                placeholder="City/Town"
                required
              />
              <select
                name="billing[state]"
                class="form-control"
                id="state"
                required
              >
                <option label="State..." selected="selected"></option>
                <option value="AL">Alabama (AL)</option>
                <option value="AK">Alaska (AK)</option>
                <option value="AZ">Arizona (AZ)</option>
                <option value="AR">Arkansas (AR)</option>
                <option value="CA">California (CA)</option>
                <option value="CO">Colorado (CO)</option>
                <option value="CT">Connecticut (CT)</option>
                <option value="DE">Delaware (DE)</option>
                <option value="DC">District Of Columbia (DC)</option>
                <option value="FL">Florida (FL)</option>
                <option value="GA">Georgia (GA)</option>
                <option value="HI">Hawaii (HI)</option>
                <option value="ID">Idaho (ID)</option>
                <option value="IL">Illinois (IL)</option>
                <option value="IN">Indiana (IN)</option>
                <option value="IA">Iowa (IA)</option>
                <option value="KS">Kansas (KS)</option>
                <option value="KY">Kentucky (KY)</option>
                <option value="LA">Louisiana (LA)</option>
                <option value="ME">Maine (ME)</option>
                <option value="MD">Maryland (MD)</option>
                <option value="MA">Massachusetts (MA)</option>
                <option value="MI">Michigan (MI)</option>
                <option value="MN">Minnesota (MN)</option>
                <option value="MS">Mississippi (MS)</option>
                <option value="MO">Missouri (MO)</option>
                <option value="MT">Montana (MT)</option>
                <option value="NE">Nebraska (NE)</option>
                <option value="NV">Nevada (NV)</option>
                <option value="NH">New Hampshire (NH)</option>
                <option value="NJ">New Jersey (NJ)</option>
                <option value="NM">New Mexico (NM)</option>
                <option value="NY">New York (NY)</option>
                <option value="NC">North Carolina (NC)</option>
                <option value="ND">North Dakota (ND)</option>
                <option value="OH">Ohio (OH)</option>
                <option value="OK">Oklahoma (OK)</option>
                <option value="OR">Oregon (OR)</option>
                <option value="PA">Pennsylvania (PA)</option>
                <option value="RI">Rhode Island (RI)</option>
                <option value="SC">South Carolina (SC)</option>
                <option value="SD">South Dakota (SD)</option>
                <option value="TN">Tennessee (TN)</option>
                <option value="TX">Texas (TX)</option>
                <option value="UT">Utah (UT)</option>
                <option value="VT">Vermont</option>
                <option value="VA">Virginia</option>
                <option value="WA">Washington</option>
                <option value="WV">West Virginia</option>
                <option value="WI">Wisconsin</option>
                <option value="WY">Wyoming</option>
              </select>
            </div>
            <div class="field padding-bottom--10 formControl">
              <input
                type="tel"
                name="billing[phone]"
                class="form-control"
                id="phone"
                placeholder="Phone Number"
                required
              />
            </div>
            <div class="name field-checkbox" style="width: fit-content">
              <input type="checkbox" id="billingCheck" />
              <label for="">Billing address same as shipping address.</label>
            </div>
          </div>
          <br /><br />
          <button id="card-button" type="button">Add Payment</button>
        </form>
        <div id="payment-status-container"></div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript"></script>
